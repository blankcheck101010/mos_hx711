// Code generated by clubbygen.
// GENERATED FILE DO NOT EDIT
// +build !clubby_strict

package vars

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"

	"cesanta.com/common/go/mgrpc"
	"cesanta.com/common/go/mgrpc/frame"
	"cesanta.com/common/go/ourjson"
	"cesanta.com/common/go/ourtrace"
	"github.com/cesanta/errors"
	"golang.org/x/net/trace"
)

var _ = bytes.MinRead
var _ = fmt.Errorf
var emptyMessage = ourjson.RawMessage{}
var _ = ourtrace.New
var _ = trace.New

const ServiceID = "http://mongoose-iot.com/fwVars"

type GetResult struct {
	Arch         *string `json:"arch,omitempty"`
	Fw_id        *string `json:"fw_id,omitempty"`
	Fw_timestamp *string `json:"fw_timestamp,omitempty"`
	Fw_version   *string `json:"fw_version,omitempty"`
	Mac_address  *string `json:"mac_address,omitempty"`
}

type Service interface {
	Get(ctx context.Context) (*GetResult, error)
}

type Instance interface {
	Call(context.Context, string, *frame.Command) (*frame.Response, error)
}

func NewClient(i Instance, addr string) Service {
	return &_Client{i: i, addr: addr}
}

type _Client struct {
	i    Instance
	addr string
}

func (c *_Client) Get(ctx context.Context) (res *GetResult, err error) {
	cmd := &frame.Command{
		Cmd: "Vars.Get",
	}
	resp, err := c.i.Call(ctx, c.addr, cmd)
	if err != nil {
		return nil, errors.Trace(err)
	}
	if resp.Status != 0 {
		return nil, errors.Trace(&mgrpc.ErrorResponse{Status: resp.Status, Msg: resp.StatusMsg})
	}

	var r *GetResult
	err = resp.Response.UnmarshalInto(&r)
	if err != nil {
		return nil, errors.Annotatef(err, "unmarshaling response")
	}
	return r, nil
}

//func RegisterService(i *clubby.Instance, impl Service) error {
//s := &_Server{impl}
//i.RegisterCommandHandler("Vars.Get", s.Get)
//i.RegisterService(ServiceID, _ServiceDefinition)
//return nil
//}

type _Server struct {
	impl Service
}

func (s *_Server) Get(ctx context.Context, src string, cmd *frame.Command) (interface{}, error) {
	return s.impl.Get(ctx)
}

var _ServiceDefinition = json.RawMessage([]byte(`{
  "methods": {
    "Get": {
      "doc": "Get device read-only vars",
      "result": {
        "properties": {
          "arch": {
            "type": "string"
          },
          "fw_id": {
            "type": "string"
          },
          "fw_timestamp": {
            "type": "string"
          },
          "fw_version": {
            "type": "string"
          },
          "mac_address": {
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "name": "Vars",
  "namespace": "http://mongoose-iot.com/fw"
}`))
